{"version":3,"sources":["algorithms/helper.tsx","algorithms/BubbleSort.tsx","algorithms/InsertionSort.tsx","algorithms/MergeSort.tsx","algorithms/QuickSort.tsx","algorithms/SelectionSort.tsx","components/AlgorithmCaption.tsx","components/ColorCaption.tsx","components/Caption.tsx","components/VisualizerController.tsx","components/Navbar.tsx","components/Bar.tsx","components/SortChart.tsx","components/SortingVisualizer.tsx","components/AlgorithmVisualizer.tsx","App.tsx","reportWebVitals.ts","GlobalStyle.tsx","index.tsx"],"names":["newTrace","array","sortedIndices","searched","selected","swaped","addTrace","trace","push","getSortedIndicies","length","swap","index1","index2","temp","BubbleSort","arr","index","i","InsertionSort","traces","j","MergeSort","MergeSortHelper","start","end","middle","Math","floor","Array","keys","map","merge","leftHalf","slice","rightHalf","leftIndex","rightIndex","mainIndex","QuickSort","quickSortHelper","low","high","pivot","partition2","console","log","pivotIndex","SelectionSort","min_idx","n","Wrapper","styled","div","AlgorithmCaption","selectedAlgorithm","algorithmCaptions","timeComplexity","auxiliarySpace","caption","style","fontWeight","fontSize","alignSelf","ColorBox","p","color","CaptionWrapper","ColorCaption","colorCaption","Caption","formControlStyle","fromWidth","width","textAlign","menuItemStyle","menuWidth","display","height","justifyContent","alignItems","VisualizerController","props","useState","algorithm","setAlgorithm","arrayLength","setArrayLength","FormControl","margin","Select","value","onChange","e","target","handleSetAlgorithm","MenuItem","handleSetArrayLengh","Button","variant","onClick","handleResetArray","minWidth","Navbar","src","process","padding","attrs","$width","$height","$color","background","Bar","IsSorted","IsSearched","IsSelected","IsSwaped","genBarGraph","num","idx","includes","SortChart","ButtonStyle","ButtonWrapper","ChartWrapper","SortingVisualizer","visualState","setVisualState","setTraces","timeoutIds","setTimeoutIds","isPlaying","useRef","useEffect","_reset","current","clearTimeouts","forEach","timeout","clearTimeout","timeoutArray","timeoutId","setTimeout","item","_changeVisualState","AlgorithmVisualizer","setArray","ALGORITHMS","resetArray","random","createTraces","sort","sorted","name","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","normalize","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0130b680.chunk.js","sourcesContent":["export interface Trace {\n  array: number[];\n  sortedIndices: number[];\n  searched: number[];\n  selected: number[];\n  swaped: number[];\n}\n\nexport type TraceArray = Trace[];\n\nexport const newTrace = (array: number[]): TraceArray => {\n  return [\n    {\n      array: [...array],\n      sortedIndices: [],\n      searched: [],\n      selected: [],\n      swaped: [],\n    },\n  ];\n};\n\nexport const addTrace = (\n  trace: TraceArray,\n  array: number[],\n  sortedIndices: number[] = [],\n  searched: number[] = [],\n  selected: number[] = [],\n  swaped: number[] = [],\n): void => {\n  trace.push({\n    array: [...array],\n    sortedIndices: [...sortedIndices],\n    searched: [...searched],\n    selected: [...selected],\n    swaped: [...swaped],\n  });\n};\n\nexport const getSortedIndicies = (trace: TraceArray): number[] => {\n  return trace[trace.length - 1].sortedIndices;\n};\n\n// export const getUpdatedSortedIndicies = (trace: TraceArray, targetIndex: number): number[] => {\n//   const temp = trace[trace.length - 1].sortedIndices;\n//   for (let i = 0; i < temp.length; i++) {\n//     if (temp[i] == targetIndex) {\n//       temp[i] += 1;\n//     }\n//   }\n//   return temp;\n// };\n\nexport const swap = (array: number[], index1: number, index2: number): void => {\n  const temp = array[index1];\n  array[index1] = array[index2];\n  array[index2] = temp;\n};\n","import { addTrace, getSortedIndicies, newTrace, swap, TraceArray } from './helper';\n\nexport const BubbleSort = (arr: number[]): TraceArray => {\n  const trace = newTrace(arr);\n\n  let index = arr.length - 1;\n\n  while (index > 0) {\n    for (let i = 0; i < index; i++) {\n      // visualize searching index\n      // sorted, searched, selected, swaped\n      addTrace(trace, arr, getSortedIndicies(trace), [i, i + 1]);\n\n      if (arr[i] > arr[i + 1]) {\n        addTrace(trace, arr, getSortedIndicies(trace), [], [], [i, i + 1]);\n        swap(arr, i, i + 1);\n      }\n    }\n    addTrace(trace, arr, [...getSortedIndicies(trace), index]);\n    index -= 1;\n  }\n  addTrace(trace, arr, [...getSortedIndicies(trace), index]);\n\n  return trace;\n};\n","import { addTrace, getSortedIndicies, newTrace, TraceArray } from './helper';\n\nexport const InsertionSort = (arr: number[]): TraceArray => {\n  const traces = newTrace(arr);\n  // sorted, searched, selected, swaped\n  for (let i = 0; i < arr.length; i++) {\n    addTrace(traces, arr, [...getSortedIndicies(traces), i], [], [i], []);\n    const temp = arr[i];\n    let j = i - 1;\n    while (j >= 0 && arr[j] > temp) {\n      arr[j + 1] = arr[j];\n      addTrace(traces, arr, getSortedIndicies(traces), [j + 1], [], []);\n      addTrace(traces, arr, getSortedIndicies(traces), [], [], [j, j + 1]);\n      j--;\n    }\n    arr[j + 1] = temp;\n    addTrace(traces, arr, getSortedIndicies(traces));\n  }\n\n  return traces;\n};\n","import { addTrace, getSortedIndicies, newTrace, TraceArray } from './helper';\n\nexport const MergeSort = (arr: number[]): TraceArray => {\n  const traces = newTrace(arr);\n\n  if (arr === []) {\n    return traces;\n  }\n  MergeSortHelper(traces, arr, 0, arr.length);\n  return traces;\n};\n\nconst MergeSortHelper = (traces: TraceArray, arr: number[], start: number, end: number): number[] => {\n  if (start === end - 1) {\n    return [arr[start]];\n  }\n\n  const middle = Math.floor((start + end) / 2);\n\n  MergeSortHelper(traces, arr, start, middle);\n  addTrace(\n    traces,\n    arr,\n    [...Array(middle - start).keys()].map((index: number) => index + start),\n  );\n\n  MergeSortHelper(traces, arr, middle, end);\n  addTrace(\n    traces,\n    arr,\n    [...Array(end - middle).keys()].map((index: number) => index + middle),\n  );\n\n  return merge(traces, arr, start, middle, end);\n};\n\nconst merge = (traces: TraceArray, arr: number[], start: number, middle: number, end: number): number[] => {\n  const leftHalf = arr.slice(start, middle);\n  const rightHalf = arr.slice(middle, end);\n  //reset colored sorted indices\n  addTrace(traces, arr, []);\n\n  let leftIndex = 0;\n  let rightIndex = 0;\n  let mainIndex = 0;\n  while (leftIndex < leftHalf.length && rightIndex < rightHalf.length) {\n    // addTrace(traces, arr, getSortedIndicies(traces), [], [], [start + mainIndex]);\n    addTrace(traces, arr, getSortedIndicies(traces), [], [], [start + leftIndex, middle + rightIndex]);\n\n    if (leftHalf[leftIndex] <= rightHalf[rightIndex]) {\n      arr[start + mainIndex] = leftHalf[leftIndex];\n      leftIndex += 1;\n    } else {\n      arr[start + mainIndex] = rightHalf[rightIndex];\n      rightIndex += 1;\n    }\n\n    addTrace(traces, arr, [...getSortedIndicies(traces), start + mainIndex]);\n    mainIndex += 1;\n  }\n  addTrace(traces, arr, [...getSortedIndicies(traces), start + mainIndex]);\n  while (leftIndex < leftHalf.length) {\n    // addTrace(traces, arr, getSortedIndicies(traces), [], [], [start + mainIndex]);\n    addTrace(traces, arr, getSortedIndicies(traces), [], [], [start + leftIndex]);\n\n    arr[start + mainIndex] = leftHalf[leftIndex];\n    leftIndex += 1;\n    mainIndex += 1;\n\n    addTrace(traces, arr, [...getSortedIndicies(traces), start + mainIndex]);\n  }\n  while (rightIndex < rightHalf.length) {\n    // addTrace(traces, arr, getSortedIndicies(traces), [], [], [start + mainIndex]);\n    addTrace(traces, arr, getSortedIndicies(traces), [], [], [middle + rightIndex]);\n\n    arr[start + mainIndex] = rightHalf[rightIndex];\n    rightIndex += 1;\n    mainIndex += 1;\n\n    addTrace(traces, arr, [...getSortedIndicies(traces), start + mainIndex]);\n  }\n\n  return arr.slice(start, end);\n};\n","import { addTrace, getSortedIndicies, newTrace, swap, TraceArray } from './helper';\n\nexport const QuickSort = (arr: number[]): TraceArray => {\n  const traces = newTrace(arr);\n\n  return quickSortHelper(traces, arr, 0, arr.length - 1);\n};\n\nconst quickSortHelper = (traces: TraceArray, arr: number[], low: number, high: number): TraceArray => {\n  if (low < high) {\n    const pivot = partition2(traces, arr, low, high);\n\n    console.log('call helper1', low, pivot - 1);\n    quickSortHelper(traces, arr, low, pivot - 1);\n    console.log('call helper', pivot + 1, high);\n    quickSortHelper(traces, arr, pivot + 1, high);\n  } else if (low === high) {\n    addTrace(traces, arr, [...getSortedIndicies(traces), low], [], [], []);\n  }\n  return traces;\n};\n\n// const partition1 = (traces: TraceArray, arr: number[], low: number, high: number) => {\n//   let swapIndex = low;\n//   const pivot = arr[high];\n\n//   while (low < high) {\n//     // console.log('swaping', low, high);\n//     addTrace(traces, arr, getSortedIndicies(traces), [low, swapIndex], [high]);\n//     if (arr[low] < pivot) {\n//       addTrace(traces, arr, getSortedIndicies(traces), [], [high], [low, swapIndex]);\n//       swap(arr, low, swapIndex);\n//       addTrace(traces, arr, getSortedIndicies(traces), [], [high], [low, swapIndex]);\n//       swapIndex += 1;\n//     }\n//     low += 1;\n//   }\n//   addTrace(traces, arr, getSortedIndicies(traces), [], [], [high, swapIndex]);\n//   swap(arr, swapIndex, high);\n\n//   addTrace(traces, arr, [...getSortedIndicies(traces), swapIndex], [], [], []);\n\n//   return swapIndex;\n// };\n\nconst partition2 = (traces: TraceArray, arr: number[], low: number, high: number) => {\n  const pivotIndex = high;\n  const pivot = arr[high];\n\n  while (low < high) {\n    while (low < arr.length && arr[low] < pivot) {\n      addTrace(traces, arr, getSortedIndicies(traces), [low, high], [pivotIndex]);\n      low += 1;\n    }\n    while (high > 0 && arr[high] >= pivot) {\n      addTrace(traces, arr, getSortedIndicies(traces), [low, high], [pivotIndex]);\n      high -= 1;\n    }\n\n    if (low < high) {\n      addTrace(traces, arr, getSortedIndicies(traces), [], [pivotIndex], [low, high]);\n      swap(arr, low, high);\n      addTrace(traces, arr, getSortedIndicies(traces), [], [pivotIndex], [low, high]);\n    }\n  }\n  addTrace(traces, arr, getSortedIndicies(traces), [], [], [pivotIndex, low]);\n  swap(arr, pivotIndex, low);\n  addTrace(traces, arr, [...getSortedIndicies(traces), low], [], [], []);\n\n  return low;\n};\n","import { addTrace, getSortedIndicies, newTrace, swap, TraceArray } from './helper';\n\nexport const SelectionSort = (arr: number[]): TraceArray => {\n  const trace = newTrace(arr);\n\n  let i, j, min_idx;\n  const n = arr.length;\n  for (i = 0; i < n - 1; i++) {\n    min_idx = i;\n    for (j = i + 1; j < n; j++) {\n      // visualize searching index\n      // sorted, searched, selected, swaped\n      addTrace(trace, arr, getSortedIndicies(trace), [j], [min_idx]);\n\n      if (arr[j] < arr[min_idx]) {\n        addTrace(trace, arr, getSortedIndicies(trace), [j], [min_idx]);\n\n        min_idx = j;\n\n        //visualize selected index\n        addTrace(trace, arr, getSortedIndicies(trace), [j], [min_idx]);\n      }\n    }\n\n    //visualize swaping indices\n    addTrace(trace, arr, getSortedIndicies(trace), [], [], [i, min_idx]);\n\n    swap(arr, i, min_idx);\n\n    //visualize sorted indices\n    addTrace(trace, arr, [...getSortedIndicies(trace), i]);\n  }\n\n  //visualize sorted indices\n  addTrace(trace, arr, [...getSortedIndicies(trace), n - 1]);\n\n  return trace;\n};\n","import styled from 'styled-components';\nimport { AlgorithmTypes } from './AlgorithmVisualizer';\n\ninterface AlgorithmCaptionProps {\n  selectedAlgorithm: AlgorithmTypes;\n}\n\nfunction AlgorithmCaption({ selectedAlgorithm }: AlgorithmCaptionProps): JSX.Element {\n  const algorithmCaptions = {\n    'Selection Sort': {\n      timeComplexity: 'O(n^2)',\n      auxiliarySpace: 'O(1)',\n      caption: 'Sorts by repeatedly finding the minimum element from unsorted part and putting it at the beginning',\n    },\n    'Bubble Sort': {\n      timeComplexity: 'O(n^2) worst & avg',\n      auxiliarySpace: 'O(1)',\n      caption: 'Sorts by repeatedly swapping the adjacent elements if they are in wrong order',\n    },\n    'Insertion Sort': {\n      timeComplexity: 'O(n^2)',\n      auxiliarySpace: 'O(1)',\n      caption: 'Values from the unsorted part are picked and placed at the correct position in the sorted part',\n    },\n    'Merge Sort': {\n      timeComplexity: 'O(nlogn)',\n      auxiliarySpace: 'O(n)',\n      caption:\n        'Sorts by dividing the input array into two halves, calls itself for the two halves, and then merges the two sorted halves.',\n    },\n    'Quick Sort': {\n      timeComplexity: 'O(nlogn) avg, O(n^2) worst',\n      auxiliarySpace: 'O(1)',\n      caption: 'Sorts by picking an element as pivot and partitions the given array around the picked pivot',\n    },\n  };\n  return (\n    <Wrapper>\n      <div style={{ fontWeight: 600, fontSize: '1.8vw', alignSelf: 'center' }}>{selectedAlgorithm}</div>\n      <div>\n        <span>Time Complexity: </span> {algorithmCaptions[selectedAlgorithm].timeComplexity}\n      </div>\n      <div>\n        <span>Auxiliary Space: </span> {algorithmCaptions[selectedAlgorithm].auxiliarySpace}\n      </div>\n      <div>{algorithmCaptions[selectedAlgorithm].caption}</div>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 50vw;\n  align-items: start;\n  justify-content: space-between;\n  padding: 0 5vw 0 5vw;\n\n  div {\n    font-size: 1.4vw;\n    padding-top: 0.2vw;\n  }\n\n  span {\n    font-size: 1.4vw;\n    font-weight: 500;\n    padding-left: 9vw;\n  }\n`;\n\nexport default AlgorithmCaption;\n","import styled from 'styled-components';\n\nfunction ColorCaption(): JSX.Element {\n  const colorCaptions = [\n    {\n      color: '#06D6A0',\n      caption: 'SORTED',\n    },\n    {\n      color: '#D81159',\n      caption: 'SWAPING',\n    },\n    {\n      color: '#FFD166',\n      caption: 'SELECTED',\n    },\n    {\n      color: '#118AB2',\n      caption: 'SEARCHING',\n    },\n  ];\n  return (\n    <Wrapper>\n      {colorCaptions.map((colorCaption) => (\n        <CaptionWrapper key={colorCaption.color}>\n          <ColorBox color={colorCaption.color}></ColorBox>\n          {colorCaption.caption}\n        </CaptionWrapper>\n      ))}\n    </Wrapper>\n  );\n}\n\nconst ColorBox = styled.div<{ color: string }>`\n  width: 4vw;\n  height: 3vh;\n  margin: 0 1vw 0 0;\n  background: ${(p) => p.color};\n  border-radius: 5px;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n`;\n\nconst CaptionWrapper = styled.div`\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  padding: 0.5vw;\n  font-size: 1.5vw;\n`;\n\nconst Wrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  justify-content: start;\n  align-items: start;\n  padding: 1vw 2vw 0 4vw;\n  width: 50vw;\n`;\n\nexport default ColorCaption;\n","import styled from 'styled-components';\nimport AlgorithmCaption from './AlgorithmCaption';\nimport { AlgorithmTypes } from './AlgorithmVisualizer';\nimport ColorCaption from './ColorCaption';\n\ninterface CaptionProps {\n  selectedAlgorithm: AlgorithmTypes;\n}\n\nfunction Caption({ selectedAlgorithm }: CaptionProps): JSX.Element {\n  return (\n    <Wrapper>\n      <ColorCaption />\n      <AlgorithmCaption selectedAlgorithm={selectedAlgorithm} />\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100vw;\n`;\n\nexport default Caption;\n","import { Button, FormControl, MenuItem, Select } from '@material-ui/core';\nimport { useState } from 'react';\nimport styled from 'styled-components';\nimport { AlgorithmTypes } from './AlgorithmVisualizer';\nimport { VisualizerControllerProps } from './Navbar';\n\nfunction VisualizerController(props: VisualizerControllerProps): JSX.Element {\n  const [algorithm, setAlgorithm] = useState<string>('Selection Sort');\n  const [arrayLength, setArrayLength] = useState<number>(100);\n  const algorithms = ['Selection Sort', 'Bubble Sort', 'Insertion Sort', 'Merge Sort', 'Quick Sort'];\n  const arrayLengths = [10, 50, 100, 200];\n\n  return (\n    <Wrapper>\n      <FormControl margin=\"none\">\n        <Select\n          value={algorithm}\n          onChange={(e) => {\n            setAlgorithm(e.target.value as string);\n            props.handleSetAlgorithm(e.target.value as AlgorithmTypes);\n          }}\n          style={formControlStyle('17vw')}\n        >\n          {algorithms.map((algorithm) => (\n            <MenuItem key={algorithm} value={algorithm}>\n              <span style={menuItemStyle('17vw')}>{algorithm}</span>\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <FormControl margin=\"none\">\n        <Select\n          value={arrayLength}\n          onChange={(e) => {\n            setArrayLength(e.target.value as number);\n            props.handleSetArrayLengh(e.target.value as number);\n          }}\n          style={formControlStyle('10vw')}\n        >\n          {arrayLengths.map((arrayLength) => (\n            <MenuItem key={arrayLength} value={arrayLength}>\n              <span style={menuItemStyle('10vw')}>{arrayLength}</span>\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <Button variant=\"contained\" onClick={props.handleResetArray} style={{ minWidth: '10vw' }}>\n        <span>Reset Array</span>\n      </Button>\n    </Wrapper>\n  );\n}\n\nconst formControlStyle = (fromWidth: string): React.CSSProperties => {\n  return { width: fromWidth, textAlign: 'center', fontWeight: 500 };\n};\n\nconst menuItemStyle = (menuWidth: string): React.CSSProperties => {\n  return {\n    display: 'flex',\n    width: menuWidth,\n    height: '6vh',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontWeight: 500,\n  };\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 45vw;\n  margin: 0 2.5% 0 0;\n`;\n\nexport default VisualizerController;\n","import styled from 'styled-components';\nimport { AlgorithmTypes } from './AlgorithmVisualizer';\nimport VisualizerController from './VisualizerController';\n\nexport interface VisualizerControllerProps {\n  handleResetArray: () => void;\n  handleSetAlgorithm: (name: AlgorithmTypes) => void;\n  handleSetArrayLengh: (arrayLength: number) => void;\n}\n\nfunction Navbar(props: VisualizerControllerProps): JSX.Element {\n  return (\n    <Wrapper>\n      <img\n        src={`${process.env.PUBLIC_URL}/logo_for_kiosk.svg`}\n        style={{ width: '40vw', height: '10vh', padding: '0.1vw 0 0 0' }}\n      />\n      <VisualizerController\n        handleResetArray={props.handleResetArray}\n        handleSetAlgorithm={props.handleSetAlgorithm}\n        handleSetArrayLengh={props.handleSetArrayLengh}\n      />\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100vw;\n  height: 10%;\n  background: white;\n`;\n\nexport default Navbar;\n","import styled from 'styled-components';\n\ninterface BarProps {\n  width: number;\n  height: number;\n  IsSorted: boolean;\n  IsSearched: boolean;\n  IsSelected: boolean;\n  IsSwaped: boolean;\n}\n\nconst Bar = ({ width, height, IsSorted, IsSearched, IsSelected, IsSwaped }: BarProps): JSX.Element => {\n  let color = '#5f5f5f';\n  if (IsSwaped) {\n    //magenta\n    color = '#D81159';\n    //E54F6D\n  } else if (IsSelected) {\n    //yellow\n    color = '#FFD166';\n    //FA7921\n  } else if (IsSearched) {\n    //blue\n    //#064789, 1C5D99, 448FA3, 68C5DB\n    color = '#118AB2';\n  } else if (IsSorted) {\n    //green\n    color = '#06D6A0';\n    //379392, 1D7874, 49A078, 049A8F\n  }\n\n  return <Wrapper $width={width} $height={height} $color={color}></Wrapper>;\n};\n\ninterface WrapperProps {\n  $width: number;\n  $height: number;\n  $color: string;\n}\n\nconst Wrapper = styled.div.attrs(({ $width, $height, $color }: WrapperProps) => ({\n  style: {\n    width: `${$width}%`,\n    height: `${$height}%`,\n    background: $color,\n  },\n}))<WrapperProps>`\n  border: 0.1px solid white;\n`;\n\nexport default Bar;\n","import styled from 'styled-components';\nimport { Trace } from '../algorithms/helper';\nimport Bar from './Bar';\n\nconst genBarGraph = ({ array, sortedIndices, searched, selected, swaped }: Trace) => {\n  return array.map((num, idx) => {\n    const width = 100 / array.length;\n    const height = (num / 1000) * 100;\n    const IsSorted = sortedIndices.includes(idx);\n    const IsSearched = searched.includes(idx);\n    const IsSelected = selected.includes(idx);\n    const IsSwaped = swaped.includes(idx);\n    return (\n      <Bar\n        key={`${idx}_${num}`}\n        width={width}\n        height={height}\n        IsSorted={IsSorted}\n        IsSearched={IsSearched}\n        IsSelected={IsSelected}\n        IsSwaped={IsSwaped}\n      ></Bar>\n    );\n  });\n};\n\nconst SortChart = ({ array, sortedIndices, searched, selected, swaped }: Trace): JSX.Element => {\n  return <Wrapper>{genBarGraph({ array, sortedIndices, searched, selected, swaped })}</Wrapper>;\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  width: 100%;\n  height: 100%;\n  background: white;\n`;\n\nexport default SortChart;\n","import { TraceArray, Trace } from '../algorithms/helper';\nimport { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport SortChart from './SortChart';\nimport { Button } from '@material-ui/core';\n\ninterface SortingVisualizerProps {\n  array: number[];\n  traces: TraceArray;\n}\n\nfunction SortingVisualizer(props: SortingVisualizerProps): JSX.Element {\n  const [visualState, setVisualState] = useState<Trace>({\n    array: [],\n    sortedIndices: [],\n    searched: [],\n    selected: [],\n    swaped: [],\n  });\n  const [traces, setTraces] = useState<TraceArray>([]);\n  const [timeoutIds, setTimeoutIds] = useState<NodeJS.Timeout[]>([]);\n  const isPlaying = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (visualState.array !== props.array) {\n      console.log('reset array');\n      _reset(props.array);\n    }\n\n    if (traces !== props.traces) {\n      console.log('reset trace');\n      setTraces(props.traces);\n    }\n    isPlaying.current = false;\n    clearTimeouts();\n  }, [props.array, props.traces]);\n\n  const clearTimeouts = () => {\n    timeoutIds.forEach((timeout) => {\n      clearTimeout(timeout);\n    });\n    isPlaying.current = false;\n    setTimeoutIds([]);\n  };\n\n  const _reset = (array: number[]) => {\n    setVisualState({\n      array,\n      sortedIndices: [],\n      searched: [],\n      selected: [],\n      swaped: [],\n    });\n  };\n\n  const _changeVisualState = (trace: Trace) => {\n    setVisualState({\n      array: trace.array,\n      sortedIndices: trace.sortedIndices,\n      searched: trace.searched,\n      selected: trace.selected,\n      swaped: trace.swaped,\n    });\n  };\n\n  const run = () => {\n    if (isPlaying.current == false) {\n      isPlaying.current = true;\n      console.log('set playing', isPlaying.current);\n      const timeoutArray: NodeJS.Timeout[] = [];\n      const timer = 30;\n\n      traces.forEach((trace, i) => {\n        const timeoutId = setTimeout(\n          (item) => {\n            _changeVisualState(item);\n          },\n          i * timer,\n          trace,\n        );\n\n        timeoutArray.push(timeoutId);\n      });\n\n      const timeoutId = setTimeout(clearTimeouts, traces.length * timer);\n      timeoutArray.push(timeoutId);\n      setTimeoutIds(timeoutArray);\n    } else {\n      console.log('already playing');\n    }\n  };\n\n  const reset = () => {\n    isPlaying.current = false;\n    clearTimeouts();\n    _reset(visualState.array);\n  };\n\n  return (\n    <Wrapper>\n      <ChartWrapper>\n        <SortChart\n          array={visualState.array}\n          sortedIndices={visualState.sortedIndices}\n          searched={visualState.searched}\n          selected={visualState.selected}\n          swaped={visualState.swaped}\n        />\n      </ChartWrapper>\n      <ButtonWrapper>\n        <Button variant=\"contained\" onClick={run} style={ButtonStyle}>\n          <span>Run</span>\n        </Button>\n        <Button variant=\"contained\" onClick={reset} style={ButtonStyle}>\n          <span>Stop</span>\n        </Button>\n      </ButtonWrapper>\n    </Wrapper>\n  );\n}\n\nconst ButtonStyle = { width: '10%', height: '100%', margin: '1%' };\n\nconst Wrapper = styled.div`\n  width: 100vw;\n  height: 70%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100vw;\n  height: 8vh;\n  padding: 1.5vh;\n`;\n\nconst ChartWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 95%;\n  height: 90%;\n\n  background: white;\n  padding: 1%;\n  border: 3px solid #5f5f5f;\n  border-radius: 10px;\n`;\n\nexport default SortingVisualizer;\n","import { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { BubbleSort } from '../algorithms/BubbleSort';\nimport { TraceArray } from '../algorithms/helper';\nimport { InsertionSort } from '../algorithms/InsertionSort';\nimport { MergeSort } from '../algorithms/MergeSort';\nimport { QuickSort } from '../algorithms/QuickSort';\nimport { SelectionSort } from '../algorithms/SelectionSort';\nimport Caption from './Caption';\nimport Navbar from './Navbar';\nimport SortingVisualizer from './SortingVisualizer';\n\ninterface Algorithms {\n  [name: string]: (arr: number[]) => TraceArray;\n}\nexport type AlgorithmTypes = 'Selection Sort' | 'Bubble Sort' | 'Insertion Sort' | 'Merge Sort' | 'Quick Sort';\n\nfunction AlgorithmVisualizer(): JSX.Element {\n  const [array, setArray] = useState<number[]>([]);\n  const [arrayLength, setArrayLength] = useState<number>(100);\n  const [traces, setTraces] = useState<TraceArray>([]);\n  const [algorithm, setAlgorithm] = useState<AlgorithmTypes>('Selection Sort');\n\n  const ALGORITHMS: Algorithms = {\n    'Selection Sort': SelectionSort,\n    'Bubble Sort': BubbleSort,\n    'Insertion Sort': InsertionSort,\n    'Merge Sort': MergeSort,\n    'Quick Sort': QuickSort,\n  };\n\n  const resetArray = (arrayLength: number) => {\n    const max = 1000;\n    const min = 10;\n    setTraces([]);\n    console.log('set trace to []');\n    setArray([...Array(arrayLength)].map(() => Math.floor(Math.random() * (max - min + 1)) + min));\n  };\n\n  const handleSetAlgorithm = (name: AlgorithmTypes) => {\n    setAlgorithm(name);\n  };\n\n  const handleSetArrayLength = (arrayLength: number) => {\n    setArrayLength(arrayLength);\n  };\n\n  const handleResetArray = () => {\n    resetArray(arrayLength);\n  };\n\n  const createTraces = () => {\n    const sort = ALGORITHMS[algorithm];\n\n    if (sort) {\n      const sorted = sort([...array]);\n      setTraces(sorted);\n      console.log('create trace');\n    }\n  };\n\n  useEffect(() => {\n    setTraces([]);\n    console.log('algo changed, resetting the traces');\n    createTraces();\n  }, [algorithm]);\n\n  useEffect(() => {\n    resetArray(arrayLength);\n  }, [arrayLength]);\n\n  useEffect(() => {\n    createTraces();\n  }, [array]);\n\n  return (\n    <Wrapper>\n      <Navbar\n        handleResetArray={handleResetArray}\n        handleSetAlgorithm={handleSetAlgorithm}\n        handleSetArrayLengh={handleSetArrayLength}\n      />\n      <SortingVisualizer array={array} traces={traces} />\n      <Caption selectedAlgorithm={algorithm} />\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  background: white;\n`;\n\nexport default AlgorithmVisualizer;\n","import AlgorithmVisualizer from './components/AlgorithmVisualizer';\n\nfunction App(): JSX.Element {\n  return <AlgorithmVisualizer />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from 'styled-components';\nimport normalize from 'styled-normalize';\n\nconst GlobalStyle = createGlobalStyle`\n  ${normalize};\n  html {\n    overflow-x: hidden;\n  }\n  \n  * {\n    box-sizing: border-box;\n    font-size: 2vw;\n    font-family: 'Roboto', sans-serif;\n  }\n  h2, h3, li, p, a, button, span {\n    font-family: 'Roboto', sans-serif;\n    letter-spacing: -0.05rem;\n  }\n  ul, li {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n  \n  button {\n    cursor: pointer;\n    outline: none;\n  }\n  a {\n    text-decoration: none;\n  }\n\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport GlobalStyle from './GlobalStyle';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n    <GlobalStyle />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
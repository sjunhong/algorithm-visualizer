{"version":3,"sources":["algorithms/helper.tsx","algorithms/BubbleSort.tsx","algorithms/InsertionSort.tsx","algorithms/MergeSort.tsx","algorithms/QuickSort.tsx","algorithms/SelectionSort.tsx","components/VisualizerController.tsx","components/Navbar.tsx","components/Bar.tsx","components/SortChart.tsx","components/SortVisualizer.tsx","components/AlgorithmVisualizer.tsx","App.tsx","reportWebVitals.ts","GlobalStyle.tsx","index.tsx"],"names":["newTrace","array","sortedIndices","searched","selected","swaped","addTrace","trace","push","getSortedIndicies","length","swap","index1","index2","temp","BubbleSort","arr","index","i","InsertionSort","traces","minIndex","j","MergeSort","MergeSortHelper","start","end","middle","Math","floor","Array","keys","map","merge","leftHalf","slice","rightHalf","leftIndex","rightIndex","mainIndex","QuickSort","quickSortHelper","low","high","pivot","partition2","console","log","pivotIndex","SelectionSort","min_idx","n","Wrapper","styled","div","VisualizerController","props","useState","algorithm","setAlgorithm","arrayLength","setArrayLength","FormControl","Select","value","onChange","e","target","handleSetAlgorithm","displayEmpty","inputProps","style","minWidth","MenuItem","handleSetArrayLengh","Button","variant","onClick","handleResetArray","Navbar","src","process","height","padding","attrs","$width","$height","$color","width","background","Bar","IsSorted","IsSearched","IsSelected","color","IsSwaped","genBarGraph","num","idx","includes","SortChart","ButtonWrapper","ChartWrapper","SortingVisualizer","visualState","setVisualState","setTraces","timeoutIds","setTimeoutIds","useEffect","_reset","clearTimeouts","forEach","timeout","clearTimeout","timeoutArray","timeoutId","setTimeout","item","_changeVisualState","margin","AlgorithmVisualizer","setArray","ALGORITHMS","resetArray","random","createTraces","sort","sorted","name","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","normalize","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30df5c04.chunk.js","sourcesContent":["export interface Trace {\n  array: number[];\n  sortedIndices: number[];\n  searched: number[];\n  selected: number[];\n  swaped: number[];\n}\n\nexport type TraceArray = Trace[];\n\nexport const newTrace = (array: number[]): TraceArray => {\n  return [\n    {\n      array: [...array],\n      sortedIndices: [],\n      searched: [],\n      selected: [],\n      swaped: [],\n    },\n  ];\n};\n\nexport const addTrace = (\n  trace: TraceArray,\n  array: number[],\n  sortedIndices: number[] = [],\n  searched: number[] = [],\n  selected: number[] = [],\n  swaped: number[] = [],\n): void => {\n  trace.push({\n    array: [...array],\n    sortedIndices: [...sortedIndices],\n    searched: [...searched],\n    selected: [...selected],\n    swaped: [...swaped],\n  });\n};\n\nexport const getSortedIndicies = (trace: TraceArray): number[] => {\n  return trace[trace.length - 1].sortedIndices;\n};\n\nexport const swap = (array: number[], index1: number, index2: number): void => {\n  const temp = array[index1];\n  array[index1] = array[index2];\n  array[index2] = temp;\n};\n","import { addTrace, getSortedIndicies, newTrace, swap, TraceArray } from './helper';\n\nexport const BubbleSort = (arr: number[]): TraceArray => {\n  const trace = newTrace(arr);\n\n  let index = arr.length - 1;\n\n  while (index > 0) {\n    for (let i = 0; i < index; i++) {\n      // visualize searching index\n      // sorted, searched, selected, swaped\n      addTrace(trace, arr, getSortedIndicies(trace), [i, i + 1]);\n\n      if (arr[i] > arr[i + 1]) {\n        addTrace(trace, arr, getSortedIndicies(trace), [], [], [i, i + 1]);\n        swap(arr, i, i + 1);\n      }\n    }\n    addTrace(trace, arr, [...getSortedIndicies(trace), index]);\n    index -= 1;\n  }\n  addTrace(trace, arr, [...getSortedIndicies(trace), index]);\n\n  return trace;\n};\n","import { addTrace, getSortedIndicies, newTrace, TraceArray } from './helper';\n\nexport const InsertionSort = (arr: number[]): TraceArray => {\n  const traces = newTrace(arr);\n\n  for (let i = 0; i < arr.length; i++) {\n    let minIndex = i;\n    for (let j = i; j < arr.length; j++) {\n      minIndex = arr[j] < arr[minIndex] ? j : minIndex;\n      addTrace(traces, arr, getSortedIndicies(traces), [j], [minIndex]);\n    }\n    const temp = arr[minIndex];\n    for (let j = minIndex; j > i; j--) {\n      addTrace(traces, arr, getSortedIndicies(traces), [], [], [j - 1]);\n      arr[j] = arr[j - 1];\n      addTrace(traces, arr, getSortedIndicies(traces), [], [], [j]);\n    }\n    arr[i] = temp;\n    addTrace(traces, arr, [...getSortedIndicies(traces), i]);\n  }\n\n  return traces;\n};\n","import { addTrace, getSortedIndicies, newTrace, TraceArray } from './helper';\n\nexport const MergeSort = (arr: number[]): TraceArray => {\n  const traces = newTrace(arr);\n\n  if (arr === []) {\n    return traces;\n  }\n  MergeSortHelper(traces, arr, 0, arr.length);\n  return traces;\n};\n\nconst MergeSortHelper = (traces: TraceArray, arr: number[], start: number, end: number): number[] => {\n  if (start === end - 1) {\n    return [arr[start]];\n  }\n\n  const middle = Math.floor((start + end) / 2);\n\n  MergeSortHelper(traces, arr, start, middle);\n  addTrace(\n    traces,\n    arr,\n    [...Array(middle - start).keys()].map((index: number) => index + start),\n  );\n\n  MergeSortHelper(traces, arr, middle, end);\n  addTrace(\n    traces,\n    arr,\n    [...Array(end - middle).keys()].map((index: number) => index + middle),\n  );\n\n  return merge(traces, arr, start, middle, end);\n};\n\nconst merge = (traces: TraceArray, arr: number[], start: number, middle: number, end: number): number[] => {\n  const leftHalf = arr.slice(start, middle);\n  const rightHalf = arr.slice(middle, end);\n  //reset colored sorted indices\n  addTrace(traces, arr, []);\n\n  let leftIndex = 0;\n  let rightIndex = 0;\n  let mainIndex = 0;\n  while (leftIndex < leftHalf.length && rightIndex < rightHalf.length) {\n    // addTrace(traces, arr, getSortedIndicies(traces), [], [], [start + mainIndex]);\n    addTrace(traces, arr, getSortedIndicies(traces), [], [], [start + leftIndex, middle + rightIndex]);\n\n    if (leftHalf[leftIndex] <= rightHalf[rightIndex]) {\n      arr[start + mainIndex] = leftHalf[leftIndex];\n      leftIndex += 1;\n    } else {\n      arr[start + mainIndex] = rightHalf[rightIndex];\n      rightIndex += 1;\n    }\n\n    addTrace(traces, arr, [...getSortedIndicies(traces), start + mainIndex]);\n    mainIndex += 1;\n  }\n  addTrace(traces, arr, [...getSortedIndicies(traces), start + mainIndex]);\n  while (leftIndex < leftHalf.length) {\n    // addTrace(traces, arr, getSortedIndicies(traces), [], [], [start + mainIndex]);\n    addTrace(traces, arr, getSortedIndicies(traces), [], [], [start + leftIndex]);\n\n    arr[start + mainIndex] = leftHalf[leftIndex];\n    leftIndex += 1;\n    mainIndex += 1;\n\n    addTrace(traces, arr, [...getSortedIndicies(traces), start + mainIndex]);\n  }\n  while (rightIndex < rightHalf.length) {\n    // addTrace(traces, arr, getSortedIndicies(traces), [], [], [start + mainIndex]);\n    addTrace(traces, arr, getSortedIndicies(traces), [], [], [middle + rightIndex]);\n\n    arr[start + mainIndex] = rightHalf[rightIndex];\n    rightIndex += 1;\n    mainIndex += 1;\n\n    addTrace(traces, arr, [...getSortedIndicies(traces), start + mainIndex]);\n  }\n\n  return arr.slice(start, end);\n};\n","import { addTrace, getSortedIndicies, newTrace, swap, TraceArray } from './helper';\n\nexport const QuickSort = (arr: number[]): TraceArray => {\n  const traces = newTrace(arr);\n\n  return quickSortHelper(traces, arr, 0, arr.length - 1);\n};\n\nconst quickSortHelper = (traces: TraceArray, arr: number[], low: number, high: number): TraceArray => {\n  if (low < high) {\n    const pivot = partition2(traces, arr, low, high);\n\n    console.log('call helper1', low, pivot - 1);\n    quickSortHelper(traces, arr, low, pivot - 1);\n    console.log('call helper', pivot + 1, high);\n    quickSortHelper(traces, arr, pivot + 1, high);\n  } else if (low === high) {\n    addTrace(traces, arr, [...getSortedIndicies(traces), low], [], [], []);\n  }\n  return traces;\n};\n\n// const partition1 = (traces: TraceArray, arr: number[], low: number, high: number) => {\n//   let swapIndex = low;\n//   const pivot = arr[high];\n\n//   while (low < high) {\n//     // console.log('swaping', low, high);\n//     addTrace(traces, arr, getSortedIndicies(traces), [low, swapIndex], [high]);\n//     if (arr[low] < pivot) {\n//       addTrace(traces, arr, getSortedIndicies(traces), [], [high], [low, swapIndex]);\n//       swap(arr, low, swapIndex);\n//       addTrace(traces, arr, getSortedIndicies(traces), [], [high], [low, swapIndex]);\n//       swapIndex += 1;\n//     }\n//     low += 1;\n//   }\n//   addTrace(traces, arr, getSortedIndicies(traces), [], [], [high, swapIndex]);\n//   swap(arr, swapIndex, high);\n\n//   addTrace(traces, arr, [...getSortedIndicies(traces), swapIndex], [], [], []);\n\n//   return swapIndex;\n// };\n\nconst partition2 = (traces: TraceArray, arr: number[], low: number, high: number) => {\n  const pivotIndex = high;\n  const pivot = arr[high];\n\n  while (low < high) {\n    while (low < arr.length && arr[low] < pivot) {\n      addTrace(traces, arr, getSortedIndicies(traces), [low, high], [pivotIndex]);\n      low += 1;\n    }\n    while (high > 0 && arr[high] >= pivot) {\n      addTrace(traces, arr, getSortedIndicies(traces), [low, high], [pivotIndex]);\n      high -= 1;\n    }\n\n    if (low < high) {\n      addTrace(traces, arr, getSortedIndicies(traces), [], [pivotIndex], [low, high]);\n      swap(arr, low, high);\n      addTrace(traces, arr, getSortedIndicies(traces), [], [pivotIndex], [low, high]);\n    }\n  }\n  addTrace(traces, arr, getSortedIndicies(traces), [], [], [pivotIndex, low]);\n  swap(arr, pivotIndex, low);\n  addTrace(traces, arr, [...getSortedIndicies(traces), low], [], [], []);\n\n  return low;\n};\n","import { addTrace, getSortedIndicies, newTrace, swap, TraceArray } from './helper';\n\nexport const SelectionSort = (arr: number[]): TraceArray => {\n  const trace = newTrace(arr);\n\n  let i, j, min_idx;\n  const n = arr.length;\n  for (i = 0; i < n - 1; i++) {\n    min_idx = i;\n    for (j = i + 1; j < n; j++) {\n      // visualize searching index\n      // sorted, searched, selected, swaped\n      addTrace(trace, arr, getSortedIndicies(trace), [j], [min_idx]);\n\n      if (arr[j] < arr[min_idx]) {\n        addTrace(trace, arr, getSortedIndicies(trace), [j], [min_idx]);\n\n        min_idx = j;\n\n        //visualize selected index\n        addTrace(trace, arr, getSortedIndicies(trace), [j], [min_idx]);\n      }\n    }\n\n    //visualize swaping indices\n    addTrace(trace, arr, getSortedIndicies(trace), [], [], [i, min_idx]);\n\n    swap(arr, i, min_idx);\n\n    //visualize sorted indices\n    addTrace(trace, arr, [...getSortedIndicies(trace), i]);\n  }\n\n  //visualize sorted indices\n  addTrace(trace, arr, [...getSortedIndicies(trace), n - 1]);\n\n  return trace;\n};\n","import { Button, FormControl, MenuItem, Select } from '@material-ui/core';\nimport { useState } from 'react';\nimport styled from 'styled-components';\nimport { VisualizerControllerProps } from './Navbar';\n\nfunction VisualizerController(props: VisualizerControllerProps): JSX.Element {\n  const [algorithm, setAlgorithm] = useState<string>('Selection Sort');\n  const [arrayLength, setArrayLength] = useState<number>(100);\n  return (\n    <Wrapper>\n      <FormControl>\n        <Select\n          value={algorithm}\n          onChange={(e) => {\n            setAlgorithm(e.target.value as string);\n            props.handleSetAlgorithm(e.target.value as string);\n          }}\n          displayEmpty\n          inputProps={{ 'aria-label': 'Without label' }}\n          style={{ minWidth: '150px' }}\n        >\n          <MenuItem value={'Selection Sort'}>\n            <span>Selection Sort</span>\n          </MenuItem>\n          <MenuItem value={'Bubble Sort'}>\n            <span>Bubble Sort</span>\n          </MenuItem>\n          <MenuItem value={'Insertion Sort'}>\n            <span>Insertion Sort</span>\n          </MenuItem>\n          <MenuItem value={'Merge Sort'}>\n            <span>Merge Sort</span>\n          </MenuItem>\n          <MenuItem value={'Quick Sort'}>\n            <span>Quick Sort</span>\n          </MenuItem>\n        </Select>\n      </FormControl>\n      <FormControl>\n        <Select\n          value={arrayLength}\n          onChange={(e) => {\n            setArrayLength(e.target.value as number);\n            props.handleSetArrayLengh(e.target.value as number);\n          }}\n          displayEmpty\n          inputProps={{ 'aria-label': 'Without label' }}\n          style={{ minWidth: '80px' }}\n        >\n          <MenuItem value={10}>\n            <span>10</span>\n          </MenuItem>\n          <MenuItem value={50}>\n            <span>50</span>\n          </MenuItem>\n          <MenuItem value={100}>\n            <span>100</span>\n          </MenuItem>\n          <MenuItem value={200}>\n            <span>200</span>\n          </MenuItem>\n        </Select>\n      </FormControl>\n      <Button variant=\"contained\" onClick={props.handleResetArray}>\n        Reset Array\n      </Button>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 500px;\n  margin: 0 30px;\n\n  span {\n    font-weight: 600;\n    // padding-left: 10px;\n  }\n`;\n\nexport default VisualizerController;\n","import styled from 'styled-components';\nimport VisualizerController from './VisualizerController';\n\nexport interface VisualizerControllerProps {\n  handleResetArray: () => void;\n  handleSetAlgorithm: (name: string) => void;\n  handleSetArrayLengh: (arrayLength: number) => void;\n}\n\nfunction Navbar(props: VisualizerControllerProps): JSX.Element {\n  return (\n    <Wrapper>\n      <img\n        src={`${process.env.PUBLIC_URL}/algorithm-visualizer-logo.svg`}\n        style={{ height: '70px', padding: '0 0 0 20px ' }}\n      />\n      <VisualizerController\n        handleResetArray={props.handleResetArray}\n        handleSetAlgorithm={props.handleSetAlgorithm}\n        handleSetArrayLengh={props.handleSetArrayLengh}\n      />\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100vw;\n  height: 100px;\n  background: white;\n`;\n\nexport default Navbar;\n","import styled from 'styled-components';\n\ninterface BarProps {\n  width: number;\n  height: number;\n  IsSorted: boolean;\n  IsSearched: boolean;\n  IsSelected: boolean;\n  IsSwaped: boolean;\n}\n\nconst Bar = ({ width, height, IsSorted, IsSearched, IsSelected, IsSwaped }: BarProps): JSX.Element => {\n  let color = '#5f5f5f';\n  if (IsSwaped) {\n    //magenta\n    color = '#D81159';\n    //E54F6D\n  } else if (IsSelected) {\n    //yellow\n    color = '#FFD166';\n    //FA7921\n  } else if (IsSearched) {\n    //blue\n    //#064789, 1C5D99, 448FA3, 68C5DB\n    color = '#118AB2';\n  } else if (IsSorted) {\n    //green\n    color = '#06D6A0';\n    //379392, 1D7874, 49A078, 049A8F\n  }\n\n  return <Wrapper $width={width} $height={height} $color={color}></Wrapper>;\n};\n\ninterface WrapperProps {\n  $width: number;\n  $height: number;\n  $color: string;\n}\n\nconst Wrapper = styled.div.attrs(({ $width, $height, $color }: WrapperProps) => ({\n  style: {\n    width: `${$width}%`,\n    height: `${$height}%`,\n    background: $color,\n  },\n}))<WrapperProps>`\n  border: 0.1px solid white;\n`;\n\nexport default Bar;\n","import styled from 'styled-components';\nimport { Trace } from '../algorithms/helper';\nimport Bar from './Bar';\n\nconst genBarGraph = ({ array, sortedIndices, searched, selected, swaped }: Trace) => {\n  return array.map((num, idx) => {\n    const width = 100 / array.length;\n    const height = (num / 1000) * 100;\n    const IsSorted = sortedIndices.includes(idx);\n    const IsSearched = searched.includes(idx);\n    const IsSelected = selected.includes(idx);\n    const IsSwaped = swaped.includes(idx);\n    return (\n      <Bar\n        key={`${idx}_${num}`}\n        width={width}\n        height={height}\n        IsSorted={IsSorted}\n        IsSearched={IsSearched}\n        IsSelected={IsSelected}\n        IsSwaped={IsSwaped}\n      ></Bar>\n    );\n  });\n};\n\nconst SortChart = ({ array, sortedIndices, searched, selected, swaped }: Trace): JSX.Element => {\n  return <Wrapper>{genBarGraph({ array, sortedIndices, searched, selected, swaped })}</Wrapper>;\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  width: 100%;\n  height: 100%;\n  background: white;\n`;\n\nexport default SortChart;\n","import { TraceArray, Trace } from '../algorithms/helper';\nimport { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport SortChart from './SortChart';\nimport { Button } from '@material-ui/core';\n\ninterface SortingVisualizerProps {\n  array: number[];\n  traces: TraceArray;\n}\n\nfunction SortingVisualizer(props: SortingVisualizerProps): JSX.Element {\n  const [visualState, setVisualState] = useState<Trace>({\n    array: [],\n    sortedIndices: [],\n    searched: [],\n    selected: [],\n    swaped: [],\n  });\n  const [traces, setTraces] = useState<TraceArray>([]);\n  const [timeoutIds, setTimeoutIds] = useState<NodeJS.Timeout[]>([]);\n\n  useEffect(() => {\n    if (visualState.array !== props.array) {\n      console.log('reset array');\n      _reset(props.array);\n    }\n\n    if (traces !== props.traces) {\n      console.log('reset trace');\n      setTraces(props.traces);\n    }\n\n    clearTimeouts();\n  }, [props.array, props.traces]);\n\n  const clearTimeouts = () => {\n    timeoutIds.forEach((timeout) => {\n      clearTimeout(timeout);\n    });\n\n    setTimeoutIds([]);\n  };\n\n  const _reset = (array: number[]) => {\n    setVisualState({\n      array,\n      sortedIndices: [],\n      searched: [],\n      selected: [],\n      swaped: [],\n    });\n  };\n\n  const _changeVisualState = (trace: Trace) => {\n    setVisualState({\n      array: trace.array,\n      sortedIndices: trace.sortedIndices,\n      searched: trace.searched,\n      selected: trace.selected,\n      swaped: trace.swaped,\n    });\n  };\n\n  const run = () => {\n    const timeoutArray: NodeJS.Timeout[] = [];\n    const timer = 20;\n\n    traces.forEach((trace, i) => {\n      const timeoutId = setTimeout(\n        (item) => {\n          _changeVisualState(item);\n        },\n        i * timer,\n        trace,\n      );\n\n      timeoutArray.push(timeoutId);\n    });\n\n    const timeoutId = setTimeout(clearTimeouts, traces.length * timer);\n    timeoutArray.push(timeoutId);\n    setTimeoutIds(timeoutArray);\n  };\n\n  const reset = () => {\n    clearTimeouts();\n    _reset(visualState.array);\n  };\n\n  return (\n    <Wrapper>\n      <ChartWrapper>\n        <SortChart\n          array={visualState.array}\n          sortedIndices={visualState.sortedIndices}\n          searched={visualState.searched}\n          selected={visualState.selected}\n          swaped={visualState.swaped}\n        />\n      </ChartWrapper>\n      <ButtonWrapper>\n        <Button variant=\"contained\" onClick={run} style={{ width: '100px', height: '50px', margin: '10px' }}>\n          Run\n        </Button>\n        <Button variant=\"contained\" onClick={reset} style={{ width: '100px', height: '50px', margin: '10px' }}>\n          reset\n        </Button>\n      </ButtonWrapper>\n    </Wrapper>\n  );\n}\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  height: 10%;\n  padding: 10px;\n`;\n\nconst Wrapper = styled.div`\n  width: 90%;\n  height: 70%;\n`;\n\nconst ChartWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 90%;\n\n  background: white;\n  padding: 10px;\n  border: 3px solid #5f5f5f;\n  border-radius: 10px;\n`;\n\nexport default SortingVisualizer;\n","import { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { BubbleSort } from '../algorithms/BubbleSort';\nimport { TraceArray } from '../algorithms/helper';\nimport { InsertionSort } from '../algorithms/InsertionSort';\nimport { MergeSort } from '../algorithms/MergeSort';\nimport { QuickSort } from '../algorithms/QuickSort';\nimport { SelectionSort } from '../algorithms/SelectionSort';\nimport Navbar from './Navbar';\nimport SortingVisualizer from './SortVisualizer';\n\ninterface Algorithms {\n  [name: string]: (arr: number[]) => TraceArray;\n}\n\nfunction AlgorithmVisualizer(): JSX.Element {\n  const [array, setArray] = useState<number[]>([]);\n  const [arrayLength, setArrayLength] = useState<number>(100);\n  const [traces, setTraces] = useState<TraceArray>([]);\n  const [algorithm, setAlgorithm] = useState<string>('Selection Sort');\n\n  const ALGORITHMS: Algorithms = {\n    'Selection Sort': SelectionSort,\n    'Bubble Sort': BubbleSort,\n    'Insertion Sort': InsertionSort,\n    'Merge Sort': MergeSort,\n    'Quick Sort': QuickSort,\n  };\n\n  const resetArray = (arrayLength: number) => {\n    const max = 1000;\n    const min = 10;\n    setTraces([]);\n    console.log('set trace to []');\n    setArray([...Array(arrayLength)].map(() => Math.floor(Math.random() * (max - min + 1)) + min));\n  };\n\n  const handleSetAlgorithm = (name: string) => {\n    setAlgorithm(name);\n  };\n\n  const handleSetArrayLength = (arrayLength: number) => {\n    setArrayLength(arrayLength);\n  };\n\n  const handleResetArray = () => {\n    resetArray(arrayLength);\n  };\n\n  const createTraces = () => {\n    const sort = ALGORITHMS[algorithm];\n\n    if (sort) {\n      const sorted = sort([...array]);\n      setTraces(sorted);\n      console.log('create trace');\n    }\n  };\n\n  useEffect(() => {\n    setTraces([]);\n    console.log('algo changed, resetting the traces');\n    createTraces();\n  }, [algorithm]);\n\n  useEffect(() => {\n    resetArray(arrayLength);\n  }, [arrayLength]);\n\n  useEffect(() => {\n    createTraces();\n  }, [array]);\n\n  return (\n    <Wrapper>\n      <Navbar\n        handleResetArray={handleResetArray}\n        handleSetAlgorithm={handleSetAlgorithm}\n        handleSetArrayLengh={handleSetArrayLength}\n      />\n      <SortingVisualizer array={array} traces={traces} />\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  background: white;\n`;\n\nexport default AlgorithmVisualizer;\n","import AlgorithmVisualizer from './components/AlgorithmVisualizer';\n\nfunction App(): JSX.Element {\n  return <AlgorithmVisualizer />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from 'styled-components';\nimport normalize from 'styled-normalize';\n\nconst GlobalStyle = createGlobalStyle`\n  ${normalize};\n  html {\n    overflow-x: hidden;\n  }\n  \n  * {\n    box-sizing: border-box;\n  }\n  h2, h3, li, p, a, button, span {\n    font-family: 'Roboto', sans-serif;\n    letter-spacing: -0.05rem;\n  }\n  ul, li {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n  \n  button {\n    cursor: pointer;\n    outline: none;\n  }\n  a {\n    text-decoration: none;\n  }\n\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport GlobalStyle from './GlobalStyle';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n    <GlobalStyle />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}